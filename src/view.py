import streamlit as st
import numpy as np
from controller import Controller
from config import COLUMNS, DATA_DIR
from utils import divide_chunks, make_grid
import json
import os
from typing import List
import random


st.set_page_config(layout='wide')



def plot_character_info(controller: Controller, grid, row: int, col: int, audio_file: str):
    character_name, character_score = controller.get_character_info(audio_file)
    txt1 = f'<p style="font-size:17px; text-align:center;"> <b>Speaker Identified With Greater Similarity</b> </p>'
    txt = f'<p style="font-size:17px; text-align:center;"> <b>Character:</b> {character_name.capitalize()} - <b>Match:</b> {round(character_score, 2)}</p>'
    grid[row][col].write(txt1, unsafe_allow_html=True)
    grid[row][col].write(txt, unsafe_allow_html=True)
    grid[row][col].divider()


def generate_view(data_videos: List, controller: Controller):
    title = f'<p style="font-size:60px; text-align:center; font-family: Verdana, sans-serif; color:#616161;"> Character\'s Identification in TV series Friends Using Voice</p>'
    description =f'''
    <p style="font-size:18px; text-align:center; font-family: Verdana, sans-serif; color:#616161;">
    This demo uses voice snippets to identify main characters from the TV series Friends. Previously,
    a voiceprint (Embedding) generated by the TitaNet Large model has been stored for each principal
    character in the TV series Friends (enrolled speakers). The demo service uses the same model to
    obtain the embeddings of the videos arranged to interact and uses the embedding as an input to
    query Qdrant for similar vectors. The data used in this demo was obtained from MELD: A Multimodal
    Multi-Party Dataset for Emotion Recognition in Conversation. </p>'''
    st.write(title, unsafe_allow_html=True)
    st.divider()
    with st.expander("See explanation ..."):
        st.write(f'''
                <p style="font-size:18px; text-align:center; font-family: Verdana, sans-serif; color:#616161;">
                It would be great to be able to identify a person by their voice computationally, right? Well
                here is the solution. </p>''',
                unsafe_allow_html=True)
        st.write(f'''
                <p style="font-size:18px; text-align:center; font-family: Verdana, sans-serif; color:#616161;">
                Speaker identification helps you determine an unknown speakerâ€™s identity within a group of
                enrolled speakers </p>''',
                unsafe_allow_html=True)
        
        st.write(description, unsafe_allow_html=True)
        st.write(f'''<p style="font-size:18px; text-align:center; font-family: Verdana, sans-serif; color:#727272;">
                Let\'s go on and try each of the videos that have been exposed! </p>''',
                unsafe_allow_html=True)
    st.divider()

    rows = len(data_videos)
    grid = make_grid(COLUMNS, rows)
    for row, file_set in enumerate(data_videos):
        for col, object in enumerate(file_set):
            video_file = open(os.path.join(DATA_DIR, object['url_video']), 'rb')
            video_bytes = video_file.read()
            grid[row][col].markdown("")
            grid[row][col].video(video_bytes)
            grid[row][col].button(f"Identify Character",
                                key=f"key_{row}_{col}",
                                use_container_width=True,
                                on_click=plot_character_info,
                                args=(controller,
                                      grid,
                                      row,
                                      col,
                                      os.path.join(DATA_DIR, object['url_audio']),)) 




if __name__ == '__main__':

    m = st.markdown("""
        <style>
        div.stButton > button:first-child {
            background-color: #F7F7F7;color:black;font-size:20px;border-radius:10px 10px 10px 10px;
        }
        div[data-testid="stExpander"] div[role="button"] p {
            font-size: 20px;
        }
        </style>""", unsafe_allow_html=True)
    @st.cache_resource
    def initialize_controller():
        controller = Controller()
        return controller
    controller = initialize_controller()
    json_file = os.path.join(DATA_DIR, 'data_config.json')
    input_file = open(json_file)
    json_array = json.load(input_file)
    splitted_data = list(divide_chunks(json_array, COLUMNS))
    generate_view(splitted_data, controller)


